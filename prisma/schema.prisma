generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  adminId      String   @id @default(uuid())
  email        String   @unique
  password     String
  name         String?
  isSuperAdmin Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  categories        Category[]
  products          Products[]
  sales             Sales[]
  purchases         Purchases[]
  expenses          Expenses[]
  salesSummary      SalesSummary[]
  purchaseSummary   PurchaseSummary[]
  expenseSummary    ExpenseSummary[]
  profitLossSummary ProfitLossSummary[]
  receivables       Receivable[]
  payables          Payable[]
}

model Category {
  categoryId String     @id @default(uuid())
  name       String
  adminId    String
  admin      Admin      @relation(fields: [adminId], references: [adminId])
  products   Products[]
  designs    Design[]
  categoryAttributes CategoryAttribute[]
}

model Products {
  productId   String           @id @default(uuid())
  name        String
  rating      Float?
  categoryId  String?
  description String?
  adminId     String
  admin       Admin            @relation(fields: [adminId], references: [adminId])
  category    Category?        @relation(fields: [categoryId], references: [categoryId])
  variants    ProductVariant[]
  Sales       Sales[]
  Purchases   Purchases[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ProductVariant {
  variantId     String                    @id @default(uuid())
  sku           String?                   @unique
  purchasePrice Float                     @default(0) // ðŸ†• cost of buying
  sellingPrice  Float                     @default(0) // ðŸ†• price for customers
  stockQuantity Int                       @default(0)
  productId     String
  product       Products                  @relation(fields: [productId], references: [productId])
  attributes    ProductVariantAttribute[]
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
}

model ProductVariantAttribute {
  id        String         @id @default(uuid())
  name      String
  value     String
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [variantId])
}

model Sales {
  saleId      String       @id @default(uuid())
  productId   String
  adminId     String
  admin       Admin        @relation(fields: [adminId], references: [adminId])
  timestamp   DateTime
  quantity    Int
  unitPrice   Float
  totalAmount Float
  product     Products     @relation(fields: [productId], references: [productId])
  receivables Receivable[]
}

model Purchases {
  purchaseId String    @id @default(uuid())
  productId  String
  adminId    String
  admin      Admin     @relation(fields: [adminId], references: [adminId])
  timestamp  DateTime
  quantity   Int
  unitCost   Float
  totalCost  Float
  product    Products  @relation(fields: [productId], references: [productId])
  payables   Payable[]
}

model Expenses {
  expenseId String   @id @default(uuid())
  adminId   String
  admin     Admin    @relation(fields: [adminId], references: [adminId])
  category  String
  amount    Float
  timestamp DateTime
}

model SalesSummary {
  salesSummaryId   String   @id @default(uuid())
  adminId          String
  admin            Admin    @relation(fields: [adminId], references: [adminId])
  totalValue       Float
  changePercentage Float?
  date             DateTime
}

model PurchaseSummary {
  purchaseSummaryId String   @id @default(uuid())
  adminId           String
  admin             Admin    @relation(fields: [adminId], references: [adminId])
  totalPurchased    Float
  changePercentage  Float?
  date              DateTime
}

model ExpenseSummary {
  expenseSummaryId  String              @id @default(uuid())
  adminId           String
  admin             Admin               @relation(fields: [adminId], references: [adminId])
  totalExpenses     Float
  date              DateTime
  ExpenseByCategory ExpenseByCategory[]
}

model ExpenseByCategory {
  expenseByCategoryId String         @id @default(uuid())
  expenseSummaryId    String
  category            String
  amount              BigInt
  date                DateTime
  expenseSummary      ExpenseSummary @relation(fields: [expenseSummaryId], references: [expenseSummaryId])
}

model ProfitLossSummary {
  id               String   @id @default(uuid())
  adminId          String
  admin            Admin    @relation(fields: [adminId], references: [adminId])
  totalSales       Float    @default(0)
  totalPurchases   Float    @default(0)
  totalExpenses    Float    @default(0)
  netProfit        Float    @default(0)
  changePercentage Float?
  periodStart      DateTime
  periodEnd        DateTime
  createdAt        DateTime @default(now())
}

model Receivable {
  receivableId String    @id @default(uuid())
  saleId       String
  adminId      String
  customerName String?
  contactInfo  String?
  amountDue    Float
  amountPaid   Float     @default(0)
  dueDate      DateTime?
  status       String    @default("unpaid") // unpaid, partial, paid
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  sale     Sales               @relation(fields: [saleId], references: [saleId])
  admin    Admin               @relation(fields: [adminId], references: [adminId])
  payments ReceivablePayment[]
}

model Payable {
  payableId    String    @id @default(uuid())
  purchaseId   String
  adminId      String
  supplierName String?
  contactInfo  String?
  amountDue    Float
  amountPaid   Float     @default(0)
  dueDate      DateTime?
  status       String    @default("unpaid") // unpaid, partial, paid
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  purchase Purchases        @relation(fields: [purchaseId], references: [purchaseId])
  admin    Admin            @relation(fields: [adminId], references: [adminId])
  payments PayablePayment[]
}

model ReceivablePayment {
  paymentId    String   @id @default(uuid())
  receivableId String
  amount       Float
  paymentDate  DateTime @default(now())
  method       String?
  reference    String?
  notes        String?
  createdAt    DateTime @default(now())

  receivable Receivable @relation(fields: [receivableId], references: [receivableId], onDelete: Cascade)
}

model PayablePayment {
  paymentId   String   @id @default(uuid())
  payableId   String
  amount      Float
  paymentDate DateTime @default(now())
  method      String?
  reference   String?
  notes       String?
  createdAt   DateTime @default(now())

  payable Payable @relation(fields: [payableId], references: [payableId], onDelete: Cascade)
}

model Design {
  designId    String   @id @default(uuid())
  name        String
  sizes       String[] // e.g. ["45", "42", "40"]
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [categoryId])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CategoryAttribute {
  attributeId String   @id @default(uuid())
  name        String
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [categoryId])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
